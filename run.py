import asyncio
import asyncpg
from aiogram.types import BotCommand, BotCommandScopeDefault
from create_global import bot, dp
from config import ADMIN_ID, DB_CONFIG
from src.admin_handlers import admin_router
from src.handlers import router
from src.middlewares import RegisterMiddleware
from src.db import init_database


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–µ –º–µ–Ω—é (–¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
async def set_commands():
    commands = [BotCommand(command='start', description='–°—Ç–∞—Ä—Ç'),
                BotCommand(command='admin', description='–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'),
                BotCommand(command='catalog', description="–ö–∞—Ç–∞–ª–æ–≥"),
                BotCommand(command='feedback', description="–û—Ç–∑—ã–≤"),
                BotCommand(command='help', description="–°–≤—è–∑–∞—Ç—å—Å—è"),
                BotCommand(command='pay', description="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
                BotCommand(command='orders', description="–ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
                BotCommand(command='profile', description="–ü—Ä–æ—Ñ–∏–ª—å")]
    await bot.set_my_commands(commands, BotCommandScopeDefault())


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
async def start_bot():
    await set_commands()
    try:
        await bot.send_message(ADMIN_ID, f'–Ø –∑–∞–ø—É—â–µ–Ωü•≥.')
    except:
        pass


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
async def stop_bot(pool):
    try:
        await bot.send_message(ADMIN_ID, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞ —á—Ç–æ?üòî')
    finally:
        await pool.close()
        print('–ü—É–ª –∑–∞–∫—Ä—ã—Ç')


async def main():
    await init_database()
    pool = await asyncpg.create_pool(**DB_CONFIG)
    dp.message.middleware(RegisterMiddleware(pool))
    dp.callback_query.middleware(RegisterMiddleware(pool))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    dp.startup.register(start_bot)
    dp.shutdown.register(lambda: stop_bot(pool))

    dp.include_router(admin_router)
    dp.include_router(router)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
